package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.26

import (
	"context"
	"fmt"
	"github/Martin-Martinez4/metube_backend/graph/model"
)

// Likes is the resolver for the likes field.
func (r *commentResolver) Likes(ctx context.Context, obj *model.Comment) (int, error) {
	panic(fmt.Errorf("not implemented: Likes - likes"))
}

// Dislikes is the resolver for the dislikes field.
func (r *commentResolver) Dislikes(ctx context.Context, obj *model.Comment) (int, error) {
	panic(fmt.Errorf("not implemented: Dislikes - dislikes"))
}

// Responses is the resolver for the responses field.
func (r *commentResolver) Responses(ctx context.Context, obj *model.Comment) (int, error) {
	panic(fmt.Errorf("not implemented: Responses - responses"))
}

// Profile is the resolver for the Profile field.
func (r *commentResolver) Profile(ctx context.Context, obj *model.Comment) (*model.Profile, error) {
	// return r.CommentService.GetProfile(ctx, obj.ID)
	return GetProfileLoader(ctx).Load(obj.ID)
}

// UpsertVideo is the resolver for the upsertVideo field.
func (r *mutationResolver) UpsertVideo(ctx context.Context, input model.VideoInput) (*model.Video, error) {
	panic(fmt.Errorf("not implemented: UpsertVideo - upsertVideo"))
}

// Login is the resolver for the login field.
func (r *mutationResolver) Login(ctx context.Context, login model.LoginInput) (*model.Profile, error) {
	profile, err := r.AuthService.Login(ctx, login)
	if err != nil {
		return nil, err
	}

	return profile, err
}

func (r *mutationResolver) Logout(ctx context.Context) (*model.Profile, error) {
	return r.AuthService.Logout(ctx)

}

func (r *queryResolver) GetLoggedInProfile(ctx context.Context) (*model.Profile, error) {
	return r.ProfileService.GetLoggedInProfile(ctx)
}

// Register is the resolver for the register field.
func (r *mutationResolver) Register(ctx context.Context, profileToRegister model.RegisterInput) (*model.Profile, error) {
	// Validate profile here
	profile, err := r.AuthService.Register(ctx, profileToRegister)
	if err != nil {
		return nil, err
	}

	return profile, err
}

// Subscribe is the resolver for the subscribe field.
func (r *mutationResolver) Subscribe(ctx context.Context, subscribee string) (bool, error) {
	return r.ProfileService.Subscribe(ctx, subscribee)
}

// Unsubscribe is the resolver for the unsubscribe field.
func (r *mutationResolver) Unsubscribe(ctx context.Context, subscribee string) (bool, error) {
	return r.ProfileService.Unsubscribe(ctx, subscribee)
}

// VideoView is the resolver for the videoView field.
func (r *mutationResolver) VideoView(ctx context.Context, videoID string) (bool, error) {
	return r.ProfileService.VideoView(ctx, videoID)
}

// LikeVideo is the resolver for the likeVideo field.
func (r *mutationResolver) LikeVideo(ctx context.Context, videoID string) (bool, error) {
	return r.ProfileService.LikeVideo(ctx, videoID)
}

// DislikeVideo is the resolver for the dislikeVideo field.
func (r *mutationResolver) DislikeVideo(ctx context.Context, videoID string) (bool, error) {
	return r.ProfileService.DislikeVideo(ctx, videoID)
}

// DeleteLikeDislikeVideo is the resolver for the deleteLikeDislikeVideo field.
func (r *mutationResolver) DeleteLikeDislikeVideo(ctx context.Context, videoID string) (bool, error) {
	return r.ProfileService.DeleteLikeDislikeVideo(ctx, videoID)
}

// CreateComment is the resolver for the createComment field.
func (r *mutationResolver) CreateComment(ctx context.Context, comment model.CommentInput) (*model.Comment, error) {
	return r.CommentService.CreateComment(ctx, comment)
}

// CreateResponse is the resolver for the createResponse field.
func (r *mutationResolver) CreateResponse(ctx context.Context, comment model.CommentInput, parentCommentID string) (*model.Comment, error) {
	return r.CommentService.CreateResponse(ctx, comment, parentCommentID)
}

// LikeComment is the resolver for the likeComment field.
func (r *mutationResolver) LikeComment(ctx context.Context, commentID string) (bool, error) {
	return r.CommentService.LikeComment(ctx, commentID)
}

// DislikeComment is the resolver for the dislikeComment field.
func (r *mutationResolver) DislikeComment(ctx context.Context, commentID string) (bool, error) {
	return r.CommentService.DislikeComment(ctx, commentID)
}

// DeleteLikeDislikeComment is the resolver for the deleteLikeDislikeComment field.
func (r *mutationResolver) DeleteLikeDislikeComment(ctx context.Context, commentID string) (bool, error) {
	return r.CommentService.DeleteLikeDislikeComment(ctx, commentID)
}

// Videos is the resolver for the videos field.
func (r *queryResolver) Videos(ctx context.Context, amount *int) ([]*model.Video, error) {
	return r.VideoService.GetMultipleVideos(*amount)
}

// Video is the resolver for the video field.
func (r *queryResolver) Video(ctx context.Context, id string) (*model.Video, error) {
	return r.VideoService.GetVideoById(id)
}
<<<<<<< HEAD
=======
func (r *queryResolver) SearchForVideoByTitle(ctx context.Context, searchTerm string) ([]*model.Video, error) {
	return r.VideoService.SearchForVideoByTitle(searchTerm)
}
>>>>>>> master

// GetVideoLikeStatus is the resolver for the getVideoLikeStatus field.
func (r *queryResolver) GetVideoLikeStatus(ctx context.Context, id string) (*model.LikeDislike, error) {
	return r.VideoService.GetVideoLikeStatus(ctx, id)
}

// GetVideoComments is the resolver for the getVideoComments field.
func (r *queryResolver) GetVideoComments(ctx context.Context, videoID string) ([]*model.Comment, error) {
	return r.CommentService.GetVideoComments(ctx, videoID)
}

// GetCommentResponses is the resolver for the getCommentResponses field.
func (r *queryResolver) GetCommentResponses(ctx context.Context, commentID string) ([]*model.Comment, error) {
	return r.CommentService.GetCommentResponses(ctx, commentID)
}

// Profile is the resolver for the Profile field.
func (r *queryResolver) Profile(ctx context.Context, username string) (*model.Profile, error) {
	return r.ProfileService.GetProfileByUsername(ctx, username)
}

// Profiles is the resolver for the Profiles field.
func (r *queryResolver) Profiles(ctx context.Context, amount int) ([]*model.Profile, error) {
	return r.ProfileService.GetMultipleProfiles(amount)
}

// GetMentions is the resolver for the getMentions field.
func (r *queryResolver) GetMentions(ctx context.Context) ([]*model.Comment, error) {
	return r.CommentService.GetMentions(ctx)
}

// Contentinformation is the resolver for the contentinformation field.
func (r *videoResolver) Contentinformation(ctx context.Context, obj *model.Video) (*model.ContentInformation, error) {
	return r.VideoService.GetContentInformation(obj.ID)
}

// Thumbnail is the resolver for the thumbnail field.
func (r *videoResolver) Thumbnail(ctx context.Context, obj *model.Video) (*model.Thumbnail, error) {
	return r.VideoService.GetThumbnail(obj.ID)
}

// Statistic is the resolver for the statistic field.
func (r *videoResolver) Statistic(ctx context.Context, obj *model.Video) (*model.Statistic, error) {
	return r.VideoService.GetStatistic(obj.ID)
}

// Status is the resolver for the status field.
func (r *videoResolver) Status(ctx context.Context, obj *model.Video) (*model.Status, error) {
	return r.VideoService.GetStatus(obj.ID)
}

// Profile is the resolver for the profile field.
func (r *videoResolver) Profile(ctx context.Context, obj *model.Video) (*model.Profile, error) {
	return r.VideoService.GetProfile(ctx, obj.ProfileID)
}

// Comment returns CommentResolver implementation.
func (r *Resolver) Comment() CommentResolver { return &commentResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Video returns VideoResolver implementation.
func (r *Resolver) Video() VideoResolver { return &videoResolver{r} }

type commentResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type videoResolver struct{ *Resolver }
