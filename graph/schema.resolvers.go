package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"fmt"
	"github/Martin-Martinez4/metube_backend/graph/model"
)

// UpsertVideo is the resolver for the upsertVideo field.
func (r *mutationResolver) UpsertVideo(ctx context.Context, input model.VideoInput) (*model.Video, error) {
	panic(fmt.Errorf("not implemented: UpsertVideo - upsertVideo"))
}

// Videos is the resolver for the videos field.
func (r *queryResolver) Videos(ctx context.Context, amount *int) ([]*model.Video, error) {

	// Limit the amount

	rows, err := r.Resolver.VideoRepo.DB.Query("SELECT id FROM video ORDER BY RANDOM() LIMIT $1", amount)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	videos := []*model.Video{}

	var videoid string

	for rows.Next() {

		err := rows.Scan(&videoid)
		if err != nil {
			fmt.Println(err)
			return nil, err
		}

		video, err := r.Video(ctx, videoid)
		if err != nil {
			fmt.Println(err)
			return nil, err
		}

		videos = append(videos, video)

	}

	return videos, nil
}

// Video is the resolver for the video field.
func (r *queryResolver) Video(ctx context.Context, id string) (*model.Video, error) {
	video := model.Video{}

	row := r.Resolver.VideoRepo.DB.QueryRow("SELECT * FROM video WHERE id = $1", id)

	err := row.Scan(&video.ID, &video.URL, &video.Categoryid, &video.Duration)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	contentinformation, err := r.Contentinformation(ctx, id)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	video.Contentinformation = contentinformation

	thumbnail, err := r.Thumbnail(ctx, id)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	video.Thumbnail = thumbnail

	stats, err := r.Statistic(ctx, id)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	video.Statistic = stats

	status, err := r.Status(ctx, id)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	video.Status = status

	return &video, nil
}

// Contentinformation is the resolver for the contentinformation field.
func (r *queryResolver) Contentinformation(ctx context.Context, id string) (*model.ContentInformation, error) {
	row := r.Resolver.VideoRepo.DB.QueryRow("SELECT title, description, channelid, published FROM contentinformation WHERE video_id = $1", id)

	contentinformation := model.ContentInformation{}

	err := row.Scan(&contentinformation.Title, &contentinformation.Description, &contentinformation.Channelid, &contentinformation.Published)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return &contentinformation, nil
}

// Statistic is the resolver for the statistic field.
func (r *queryResolver) Statistic(ctx context.Context, id string) (*model.Statistic, error) {
	row := r.Resolver.VideoRepo.DB.QueryRow("SELECT likes, dislikes, views, favorites, comments FROM statistic WHERE video_id = $1", id)

	statistic := model.Statistic{}

	err := row.Scan(&statistic.Likes, &statistic.Dislikes, &statistic.Views, &statistic.Favorites, &statistic.Comments)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return &statistic, nil
}

// Thumbnail is the resolver for the thumbnail field.
func (r *queryResolver) Thumbnail(ctx context.Context, id string) (*model.Thumbnail, error) {
	row := r.Resolver.VideoRepo.DB.QueryRow("SELECT url FROM thumbnail WHERE video_id = $1", id)

	thumbnail := model.Thumbnail{}

	err := row.Scan(&thumbnail.URL)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return &thumbnail, nil
}

// Status is the resolver for the status field.
func (r *queryResolver) Status(ctx context.Context, id string) (*model.Status, error) {
	row := r.Resolver.VideoRepo.DB.QueryRow("SELECT uploadstatus, privacystatus FROM status WHERE video_id = $1", id)

	status := model.Status{}

	err := row.Scan(&status.Uploadstatus, &status.Privacystatus)
	if err != nil {
		fmt.Println(err)
		return nil, err
	}

	return &status, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
