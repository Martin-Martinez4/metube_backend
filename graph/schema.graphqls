# GraphQL schema example
#
# https://gqlgen.com/getting-started/
# To run generation go run github.com/99designs/gqlgen generate

# Each line is a new potential query
# (id:ID!) ! means the id is required
# Thin after : is what is returned
type Query{
  videos(amount: Int): [Video] @authorize
  video(id:ID!): Video
  profile(username: String!): Profile
  profiles(amount: Int!): [Profile]
 
}

# Input Type is responsible for handling the input needed to create or modify a character.
type Mutation{
  upsertVideo(input: VideoInput!): Video!
  login(login: loginInput!): Profile
  register(profileToRegister: registerInput!): Profile
  subscribe(subscribee: String!): Boolean! @authorize
}

# id, title, description, url, categoryid, duration, channelid, published
type Video{
  id: ID!
  url: String!
  categoryid: String!
  duration: Int!
  profile_id: ID!
  contentinformation: ContentInformation
  thumbnail: Thumbnail
  statistic: Statistic
  status: Status 
  profile: Profile

}

type ContentInformation{
  title: String!
  description: String!
  published: String!
  channelid: String!

}

type Profile{
  username: String!
  displayname: String
  isChannel: Boolean
  subscribers: Int

}

type Thumbnail{
  url: String!
  
}

type Statistic {
  likes: Int!
  dislikes: Int!
  views: Int!
  favorites: Int
  comments: Int!

}


enum UPLOADSTATUS{processing, error, complete}
enum PRIVACYSTATUS{private, public}

type Status{
  uploadstatus: UPLOADSTATUS!
  privacystatus: PRIVACYSTATUS!
}

input VideoInput {
  id: ID!
  url: String!
}

input loginInput{
  username: String!
  password: String!
}

input registerInput{
  username: String!
  displayname: String!
  password: String!
  password2: String!
}

directive @authorize on FIELD_DEFINITION


